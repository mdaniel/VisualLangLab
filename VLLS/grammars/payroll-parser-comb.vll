<VLL-Grammar>
  <Whitespace>\\s+</Whitespace>
  <Comments></Comments>
  <Tokens>
    <Literal Name="IS" Pattern="is"/>
    <Literal Name="IN" Pattern="in"/>
    <Literal Name="PERCENT" Pattern="percent"/>
    <Regex Name="floatingPointNumber" Pattern="-?(\\d+(\\.\\d*)?|\\d*\\.\\d+)(([eE][+-]?\\d+)[fFdD]|([eE][+-]?\\d+)|[fFdD])"/>
    <Literal Name="FOR" Pattern="for"/>
    <Literal Name="INSURANCE" Pattern="insurance"/>
    <Literal Name="RETIREMENT" Pattern="retirement"/>
    <Literal Name="TAX" Pattern="tax"/>
    <Literal Name="INCOME" Pattern="income"/>
    <Literal Name="CONTRIBUTIONS" Pattern="contributions"/>
    <Regex Name="stringLiteral" Pattern="\&quot;([^\&quot;\\p{Cntrl}\\\\]|\\[\\/bfnrt]|\\\\u[a-fA-F0-9]{4})*\&quot;"/>
    <Literal Name="SALARY" Pattern="salary"/>
    <Literal Name="FUND" Pattern="fund"/>
    <Literal Name="DEDUCTIONS" Pattern="deductions"/>
    <Regex Name="DAYS" Pattern="days?"/>
    <Regex Name="decimalNumber" Pattern="\\d+(\\.\\d*)?|\\d*\\.\\d+"/>
    <Literal Name="PAYCHECK" Pattern="paycheck"/>
    <Literal Name="ARE" Pattern="are"/>
    <Literal Name="GROSS" Pattern="gross"/>
    <Literal Name="COMMA" Pattern=","/>
    <Literal Name="STATE" Pattern="state"/>
    <Literal Name="OF" Pattern="of"/>
    <Literal Name="MINUS" Pattern="minus"/>
    <Literal Name="EMPLOYEE" Pattern="employee"/>
    <Regex Name="WEEKS" Pattern="weeks?"/>
    <Literal Name="FEDERAL" Pattern="federal"/>
    <Literal Name="LCURLY" Pattern="{"/>
    <Literal Name="RCURLY" Pattern="}"/>
    <Literal Name="CURRENCY" Pattern="currency"/>
    <Literal Name="PREMIUMS" Pattern="premiums"/>
  </Tokens>
  <Parsers>
    <Parser Name="gross">
        <Sequence ActionText="function (a) {&#xA;  if (a !== null) {&#xA;    VLL.grossAmount = VLL.salaryForDays(a)&#xA;    return VLL.grossAmount;&#xA;  }&#xA;}">
          <Token Ref="IS" Drop="true"/>
          <Token Ref="SALARY" Drop="true"/>
          <Token Ref="FOR" Drop="true"/>
          <Reference Ref="duration" />
        </Sequence>
    </Parser>
    <Parser Name="employeeName">
        <Token Ref="stringLiteral" ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; &#xA;  case n: String =&gt; n.substring(1, n.length - 1)&#xA;}"/>
    </Parser>
    <Parser Name="doubleNumber">
        <Token Ref="decimalNumber" ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt;&#xA;  case d: String =&gt; d.toDouble&#xA;}"/>
    </Parser>
    <Parser Name="empl">
        <Sequence >
          <Token Ref="PAYCHECK" Drop="true"/>
          <Token Ref="FOR" Drop="true"/>
          <Token Ref="EMPLOYEE" Drop="true"/>
          <Reference Ref="employeeName" />
        </Sequence>
    </Parser>
    <Parser Name="tax">
        <Sequence >
          <Reference Ref="fedState" />
          <Token Ref="INCOME" Drop="true"/>
          <Token Ref="TAX" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="deductKind">
        <Choice >
          <Reference Ref="tax" />
          <Reference Ref="insurance" />
          <Reference Ref="retirement" />
        </Choice>
    </Parser>
    <Parser Name="duration">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt;&#xA;  case Array(n: String, factor: Int) =&gt; n.toInt * factor&#xA;}">
          <Token Ref="decimalNumber" />
          <Reference Ref="weekDays" />
        </Sequence>
    </Parser>
    <Parser Name="fedState">
        <Choice >
          <Token Ref="FEDERAL" />
          <Token Ref="STATE" />
        </Choice>
    </Parser>
    <Parser Name="retirement">
        <Sequence >
          <Token Ref="RETIREMENT" Drop="true"/>
          <Token Ref="FUND" Drop="true"/>
          <Token Ref="CONTRIBUTIONS" />
        </Sequence>
    </Parser>
    <Parser Name="amount">
        <Sequence >
          <Reference Ref="toBe" Drop="true"/>
          <Reference Ref="doubleNumber" />
          <Token Ref="IN" Drop="true"/>
          <Token Ref="GROSS" Drop="true"/>
          <Token Ref="CURRENCY" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="toBe">
        <Choice >
          <Token Ref="IS" />
          <Token Ref="ARE" />
        </Choice>
    </Parser>
    <Parser Name="deductAmount">
        <Choice ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; &#xA;  case (_, d: Double) =&gt; d&#xA;}">
          <Reference Ref="percentage" />
          <Reference Ref="amount" />
        </Choice>
    </Parser>
    <Parser Name="percentage">
        <Sequence ActionText="function (arg) {&#xA;  if (arg !== null) {&#xA;    return VLL.grossAmount * (arg / 100);&#xA;  }&#xA;}">
          <Reference Ref="toBe" Drop="true"/>
          <Reference Ref="doubleNumber" />
          <Token Ref="PERCENT" Drop="true"/>
          <Token Ref="OF" Drop="true"/>
          <Token Ref="GROSS" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="Paycheck">
        <Sequence >
          <Reference Ref="empl" />
          <Reference Ref="gross" />
          <Reference Ref="deduct" />
        </Sequence>
    </Parser>
    <Parser Name="days">
        <Token Ref="DAYS" ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt;&#xA;  case _ =&gt; 1&#xA;}"/>
    </Parser>
    <Parser Name="deduct">
        <Sequence >
          <Token Ref="MINUS" Drop="true"/>
          <Token Ref="DEDUCTIONS" Drop="true"/>
          <Token Ref="FOR" Drop="true"/>
          <Token Ref="LCURLY" Drop="true"/>
          <RepSep Mult="*" ActionText="(a:Any) =&gt; a match {&#xA;  case null =&gt;&#xA;  case ld: List[Double] =&gt; ld.foldLeft(0.0){_ + _}&#xA;}">
            <Reference Ref="deductItem" />
            <Token Ref="COMMA" />
          </RepSep>
          <Token Ref="RCURLY" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="weeks">
        <Token Ref="WEEKS" ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt;&#xA;  case _ =&gt; 5&#xA;}"/>
    </Parser>
    <Parser Name="weekDays">
        <Choice ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt;&#xA;  case Pair(_, n: Int) =&gt; n&#xA;}">
          <Reference Ref="weeks" />
          <Reference Ref="days" />
        </Choice>
    </Parser>
    <Parser Name="insurance">
        <Sequence >
          <Token Ref="INSURANCE" Drop="true"/>
          <Token Ref="PREMIUMS" />
        </Sequence>
    </Parser>
    <Parser Name="deductItem">
        <Sequence >
          <Reference Ref="deductKind" Drop="true"/>
          <Reference Ref="deductAmount" />
        </Sequence>
    </Parser>
    <Parser Name="PaycheckTester">
        <Reference Ref="Paycheck" ActionText="function (arg) {&#xA;  if (arg === null) {&#xA;//****************************************&#xA;//          SETUP actions&#xA;//****************************************&#xA;  // global variables and functions ...&#xA;    VLL.grossSalary = 500.0&#xA;    VLL.salaryForDays = function (days) {&#xA;      return VLL.grossSalary * days;&#xA;    }&#xA;  // Input text for parser ...&#xA;    ParserTestInput.setText(&#xA;      &quot;paycheck for employee \&quot;Buck Trends\&quot;\n&quot; +&#xA;      &quot;is salary for 2 weeks minus deductions for {\n&quot; +&#xA;      &quot;  federal income tax is 25. percent of gross,\n&quot; +&#xA;      &quot;  state income tax is 5. percent of gross,\n&quot; +&#xA;      &quot;  insurance premiums are 500. in gross currency,\n&quot; +&#xA;      &quot;  retirement fund contributions are 10. percent of gross\n&quot; +&#xA;      &quot;}&quot;&#xA;    )&#xA;  } else {&#xA;//****************************************&#xA;//          TEST actions&#xA;//****************************************&#xA;    if (arg.length === 3) {&#xA;      var error = &quot;&quot;&#xA;      var empl = arg[0];&#xA;      if (empl !== &quot;Buck Trends&quot;) {&#xA;        error += &quot;BAD empl, &quot;&#xA;      }&#xA;      var gross = arg[1];&#xA;      if (gross !== 5000) {&#xA;        error += &quot;BAD gross, &quot;&#xA;      }&#xA;      var deduct = arg[2];&#xA;      if (deduct !== 2500) {&#xA;        error += &quot;BAD deduct&quot;&#xA;      }&#xA;      if (error === &quot;&quot;) {&#xA;        return &quot;OK&quot;;&#xA;      } else {&#xA;        return error;&#xA;      }&#xA;    } else {&#xA;      return &quot;BAD AST structure&quot;;&#xA;    }&#xA;  }&#xA;}"/>
    </Parser>
  </Parsers>
</VLL-Grammar>
