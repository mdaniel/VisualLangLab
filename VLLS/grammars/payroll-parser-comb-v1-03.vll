<VLL-Grammar>
  <Whitespace>\\s+</Whitespace>
  <Comments></Comments>
  <Tokens>
    <Literal Name="IS" Pattern="is"/>
    <Literal Name="IN" Pattern="in"/>
    <Literal Name="PERCENT" Pattern="percent"/>
    <Regex Name="floatingPointNumber" Pattern="-?(\\d+(\\.\\d*)?|\\d*\\.\\d+)(([eE][+-]?\\d+)[fFdD]|([eE][+-]?\\d+)|[fFdD])"/>
    <Literal Name="FOR" Pattern="for"/>
    <Literal Name="INSURANCE" Pattern="insurance"/>
    <Literal Name="RETIREMENT" Pattern="retirement"/>
    <Literal Name="TAX" Pattern="tax"/>
    <Literal Name="INCOME" Pattern="income"/>
    <Literal Name="CONTRIBUTIONS" Pattern="contributions"/>
    <Regex Name="stringLiteral" Pattern="\&quot;([^\&quot;\\p{Cntrl}\\\\]|\\[\\/bfnrt]|\\\\u[a-fA-F0-9]{4})*\&quot;"/>
    <Literal Name="DEDUCTIONS" Pattern="deductions"/>
    <Literal Name="SALARY" Pattern="salary"/>
    <Literal Name="FUND" Pattern="fund"/>
    <Literal Name="DAYS" Pattern="days"/>
    <Regex Name="decimalNumber" Pattern="\\d+(\\.\\d*)?|\\d*\\.\\d+"/>
    <Literal Name="PAYCHECK" Pattern="paycheck"/>
    <Literal Name="ARE" Pattern="are"/>
    <Literal Name="DAY" Pattern="day"/>
    <Literal Name="GROSS" Pattern="gross"/>
    <Literal Name="COMMA" Pattern=","/>
    <Literal Name="STATE" Pattern="state"/>
    <Literal Name="OF" Pattern="of"/>
    <Literal Name="MINUS" Pattern="minus"/>
    <Literal Name="EMPLOYEE" Pattern="employee"/>
    <Literal Name="WEEKS" Pattern="weeks"/>
    <Literal Name="FEDERAL" Pattern="federal"/>
    <Literal Name="LCURLY" Pattern="{"/>
    <Literal Name="RCURLY" Pattern="}"/>
    <Literal Name="WEEK" Pattern="week"/>
    <Literal Name="CURRENCY" Pattern="currency"/>
    <Literal Name="PREMIUMS" Pattern="premiums"/>
  </Tokens>
  <Parsers>
    <Parser Name="gross">
        <Sequence >
          <Token Ref="IS" Drop="true"/>
          <Token Ref="SALARY" Drop="true"/>
          <Token Ref="FOR" Drop="true"/>
          <Reference Ref="duration" />
        </Sequence>
    </Parser>
    <Parser Name="employeeName">
        <Token Ref="stringLiteral" />
    </Parser>
    <Parser Name="doubleNumber">
        <Token Ref="decimalNumber" />
    </Parser>
    <Parser Name="empl">
        <Sequence >
          <Token Ref="PAYCHECK" Drop="true"/>
          <Token Ref="FOR" Drop="true"/>
          <Token Ref="EMPLOYEE" Drop="true"/>
          <Reference Ref="employeeName" />
        </Sequence>
    </Parser>
    <Parser Name="tax">
        <Sequence >
          <Reference Ref="fedState" />
          <Token Ref="INCOME" Drop="true"/>
          <Token Ref="TAX" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="deductKind">
        <Choice >
          <Reference Ref="tax" />
          <Reference Ref="insurance" />
          <Reference Ref="retirement" />
        </Choice>
    </Parser>
    <Parser Name="duration">
        <Sequence >
          <Token Ref="decimalNumber" />
          <Reference Ref="weekDays" />
        </Sequence>
    </Parser>
    <Parser Name="fedState">
        <Choice >
          <Token Ref="FEDERAL" />
          <Token Ref="STATE" />
        </Choice>
    </Parser>
    <Parser Name="retirement">
        <Sequence >
          <Token Ref="RETIREMENT" Drop="true"/>
          <Token Ref="FUND" Drop="true"/>
          <Token Ref="CONTRIBUTIONS" />
        </Sequence>
    </Parser>
    <Parser Name="amount">
        <Sequence >
          <Reference Ref="toBe" Drop="true"/>
          <Reference Ref="doubleNumber" />
          <Token Ref="IN" Drop="true"/>
          <Token Ref="GROSS" Drop="true"/>
          <Token Ref="CURRENCY" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="toBe">
        <Choice >
          <Token Ref="IS" />
          <Token Ref="ARE" />
        </Choice>
    </Parser>
    <Parser Name="deductAmount">
        <Choice >
          <Reference Ref="percentage" />
          <Reference Ref="amount" />
        </Choice>
    </Parser>
    <Parser Name="percentage">
        <Sequence >
          <Reference Ref="toBe" Drop="true"/>
          <Reference Ref="doubleNumber" />
          <Token Ref="PERCENT" Drop="true"/>
          <Token Ref="OF" Drop="true"/>
          <Token Ref="GROSS" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="Paycheck">
        <Sequence >
          <Reference Ref="empl" />
          <Reference Ref="gross" />
          <Reference Ref="deduct" />
        </Sequence>
    </Parser>
    <Parser Name="PaycheckTesterScala">
        <Reference Ref="Paycheck" ActionText="(arg: Any) =&gt; arg match {&#xA;//****************************************&#xA;//          SETUP actions&#xA;//****************************************&#xA;  case null =&gt; &#xA;    ParserTestInput.text = &#xA;      &quot;&quot;&quot;|paycheck for employee &quot;Buck Trends&quot;&#xA;      |is salary for 2 weeks minus deductions for {&#xA;      |federal income tax is 25. percent of gross,&#xA;      |state income tax is 5. percent of gross,&#xA;      |insurance premiums are 500. in gross currency,&#xA;      |retirement fund contributions are 10. percent of gross&#xA;      |}&quot;&quot;&quot;.stripMargin&#xA;//****************************************&#xA;//          TEST actions&#xA;//****************************************&#xA;  case Array(empl, gross: Array[_], deduct) =&gt;&#xA;    Array(&#xA;      if (empl == &quot;\&quot;Buck Trends\&quot;&quot;) &#xA;        &quot;OK&quot; &#xA;      else &#xA;        &quot;BAD empl (%s)&quot;.format(empl),&#xA;      gross match {&#xA;        case Array(&quot;2&quot;, Pair(0, &quot;weeks&quot;)) =&gt; &quot;OK&quot;&#xA;        case _ =&gt; &quot;BAD gross (%s)&quot;.format(gross.mkString(&quot;, &quot;))&#xA;      },&#xA;      deduct match {&#xA;        case List((0,&quot;25.&quot;), (0,&quot;5.&quot;), (1,&quot;500.&quot;), (0,&quot;10.&quot;)) =&gt; &quot;OK&quot;&#xA;        case _ =&gt; &quot;BAD deduct (%s)&quot;.format(deduct)&#xA;      }&#xA;    ).mkString(&quot;, &quot;)&#xA;  case _ =&gt; &quot;BAD AST structure&quot;&#xA;}"/>
    </Parser>
    <Parser Name="deduct">
        <Sequence >
          <Token Ref="MINUS" Drop="true"/>
          <Token Ref="DEDUCTIONS" Drop="true"/>
          <Token Ref="FOR" Drop="true"/>
          <Token Ref="LCURLY" Drop="true"/>
          <Reference Ref="deductItems" />
          <Token Ref="RCURLY" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="deductItems">
        <RepSep Mult="+">
          <Reference Ref="deductItem" />
          <Token Ref="COMMA" />
        </RepSep>
    </Parser>
    <Parser Name="PaycheckTesterJs">
        <Reference Ref="Paycheck" ActionText="function (a) {&#xA;  if (a) {&#xA;    // Test actions ...&#xA;    var empl = a[0], gross = a[1], deduct = a[2];&#xA;    println(&quot;empl: &quot; + empl);&#xA;    println(&quot;gross: &quot; + gross);&#xA;    println(&quot;deduct: &quot; + deduct);&#xA;//    return &quot;OK&quot;;&#xA;  } else {&#xA;    // Setup actions ...&#xA;  }&#xA;}"/>
    </Parser>
    <Parser Name="weekDays">
        <Choice >
          <Token Ref="WEEKS" />
          <Token Ref="WEEK" />
          <Token Ref="DAYS" />
          <Token Ref="DAY" />
        </Choice>
    </Parser>
    <Parser Name="insurance">
        <Sequence >
          <Token Ref="INSURANCE" Drop="true"/>
          <Token Ref="PREMIUMS" />
        </Sequence>
    </Parser>
    <Parser Name="deductItem">
        <Sequence >
          <Reference Ref="deductKind" Drop="true"/>
          <Reference Ref="deductAmount" />
        </Sequence>
    </Parser>
  </Parsers>
</VLL-Grammar>
