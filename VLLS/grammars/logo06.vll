<VLL-Grammar>
  <Whitespace>[ \t\n\013\f\r]+</Whitespace>
  <Comments></Comments>
  <Tokens>
    <Literal Name="SHOWTURTLE3" Pattern="ST"/>
    <Literal Name="BACKGROUND1" Pattern="BACKGROUND"/>
    <Literal Name="HIDETURTLE3" Pattern="HT"/>
    <Literal Name="END2" Pattern="end"/>
    <Literal Name="HIDETURTLE4" Pattern="ht"/>
    <Literal Name="BACKGROUND3" Pattern="BG"/>
    <Literal Name="RBKT" Pattern="]"/>
    <Literal Name="TO2" Pattern="to"/>
    <Literal Name="REPEAT1" Pattern="REPEAT"/>
    <Literal Name="NOWRAP2" Pattern="nowrap"/>
    <Literal Name="TO1" Pattern="TO"/>
    <Literal Name="SETXY1" Pattern="SETXY"/>
    <Literal Name="PENCOLOR1" Pattern="PENCOLOR"/>
    <Literal Name="FORWARD3" Pattern="FD"/>
    <Literal Name="RIGHT3" Pattern="RT"/>
    <Literal Name="BACK3" Pattern="BK"/>
    <Literal Name="SETHEADING4" Pattern="sh"/>
    <Literal Name="SETHEADING1" Pattern="SETHEADING"/>
    <Literal Name="PENUP1" Pattern="PENUP"/>
    <Literal Name="PENDOWN2" Pattern="pendown"/>
    <Literal Name="MAKE1" Pattern="MAKE"/>
    <Literal Name="HEADING2" Pattern="heading"/>
    <Literal Name="BACK4" Pattern="bk"/>
    <Literal Name="MAKE2" Pattern="make"/>
    <Literal Name="SETX1" Pattern="SETX"/>
    <Literal Name="MULT" Pattern="*"/>
    <Literal Name="YCOR1" Pattern="YCOR"/>
    <Literal Name="BACKGROUND4" Pattern="bg"/>
    <Literal Name="HIDETURTLE1" Pattern="HIDETURTLE"/>
    <Literal Name="END1" Pattern="END"/>
    <Literal Name="PENCOLOR4" Pattern="pc"/>
    <Literal Name="HOME1" Pattern="home"/>
    <Literal Name="PENCOLOR3" Pattern="PC"/>
    <Literal Name="CLEARSCREEN4" Pattern="cs"/>
    <Literal Name="NODRAW1" Pattern="NODRAW"/>
    <Literal Name="PENDOWN3" Pattern="PD"/>
    <Literal Name="CLEARSCREEN1" Pattern="CLEARSCREEN"/>
    <Literal Name="BACK2" Pattern="back"/>
    <Literal Name="SETHEADING3" Pattern="SH"/>
    <Literal Name="SHOWTURTLE1" Pattern="SHOWTURTLE"/>
    <Literal Name="XCOR1" Pattern="XCOR"/>
    <Literal Name="PENDOWN4" Pattern="pd"/>
    <Literal Name="BACK1" Pattern="BACK"/>
    <Literal Name="RIGHT1" Pattern="RIGHT"/>
    <Literal Name="PENUP4" Pattern="pu"/>
    <Regex Name="SYMBOL" Pattern="\\&quot;[a-zA-Z][a-zA-Z0-9]*"/>
    <Literal Name="TEXTSCREEN2" Pattern="textscreen"/>
    <Literal Name="FORWARD2" Pattern="forward"/>
    <Literal Name="DRAW2" Pattern="draw"/>
    <Literal Name="LEFT4" Pattern="lt"/>
    <Literal Name="YCOR2" Pattern="ycor"/>
    <Literal Name="DRAW1" Pattern="DRAW"/>
    <Literal Name="BACKGROUND2" Pattern="background"/>
    <Literal Name="NOWRAP1" Pattern="NOWRAP"/>
    <Literal Name="PENDOWN1" Pattern="PENDOWN"/>
    <Literal Name="PENCOLOR2" Pattern="pencolor"/>
    <Literal Name="XCOR2" Pattern="xcor"/>
    <Literal Name="LBKT" Pattern="["/>
    <Literal Name="IF1" Pattern="IF"/>
    <Literal Name="TEXTSCREEN1" Pattern="TEXTSCREEN"/>
    <Literal Name="CLEARSCREEN3" Pattern="CS"/>
    <Regex Name="NAME" Pattern="[a-zA-Z][a-zA-Z0-9]*"/>
    <Literal Name="IF2" Pattern="if"/>
    <Literal Name="CLEARSCREEN2" Pattern="clearscreen"/>
    <Literal Name="WRAP2" Pattern="wrap"/>
    <Literal Name="SETX2" Pattern="setx"/>
    <Literal Name="LEFT1" Pattern="LEFT"/>
    <Literal Name="SETXY2" Pattern="setxy"/>
    <Regex Name="NUMBER" Pattern="[0-9]+"/>
    <Literal Name="FORWARD4" Pattern="fd"/>
    <Literal Name="FULLSCREEN2" Pattern="fullscreen"/>
    <Literal Name="LEFT3" Pattern="LT"/>
    <Regex Name="VARIABLE" Pattern=":[a-zA-Z][a-zA-Z0-9]*"/>
    <Literal Name="SHOWTURTLE4" Pattern="st"/>
    <Literal Name="PENUP3" Pattern="PU"/>
    <Literal Name="SHOWTURTLE2" Pattern="showturtle"/>
    <Literal Name="HEADING1" Pattern="HEADING"/>
    <Literal Name="MINUS" Pattern="-"/>
    <Literal Name="SPLITSCREEN1" Pattern="SPLITSCREEN"/>
    <Literal Name="HOME2" Pattern="HOME"/>
    <Literal Name="HIDETURTLE2" Pattern="hideturtle"/>
    <Literal Name="SPLITSCREEN2" Pattern="splitscreen"/>
    <Literal Name="DIV" Pattern="/"/>
    <Literal Name="WRAP1" Pattern="WRAP"/>
    <Literal Name="REPEAT2" Pattern="repeat"/>
    <Literal Name="SETY2" Pattern="sety"/>
    <Literal Name="LEFT2" Pattern="left"/>
    <Literal Name="SETY1" Pattern="SETY"/>
    <Literal Name="FORWARD1" Pattern="FORWARD"/>
    <Literal Name="NODRAW2" Pattern="nodraw"/>
    <Literal Name="RIGHT4" Pattern="rt"/>
    <Literal Name="SETHEADING2" Pattern="setheading"/>
    <Literal Name="PENUP2" Pattern="penup"/>
    <Literal Name="FULLSCREEN1" Pattern="FULLSCREEN"/>
    <Literal Name="RIGHT2" Pattern="right"/>
    <Literal Name="PLUS" Pattern="+"/>
  </Tokens>
  <Parsers>
    <Parser Name="expr">
        <Choice >
          <Token Ref="NUMBER" />
          <Token Ref="VARIABLE" />
        </Choice>
    </Parser>
    <Parser Name="statements">
        <Choice ActionText="(a: Any) =&gt; {&#xA;  printf(&quot;statements: %s%n&quot;, a)&#xA;}&#xA;&#xA;">
          <Reference Ref="stmtBack" />
          <Reference Ref="stmtDraw" />
          <Reference Ref="stmtForward" />
          <Reference Ref="stmtLeft" />
          <Reference Ref="stmtMake" />
          <Reference Ref="stmtNoDraw" />
          <Reference Ref="stmtPenColor" />
          <Reference Ref="stmtPenDown" />
          <Reference Ref="stmtPenUp" />
          <Reference Ref="stmtRepeat" />
          <Reference Ref="stmtRight" />
          <Reference Ref="stmtTo" />
        </Choice>
    </Parser>
    <Parser Name="stmtPenDown">
        <Choice ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; import scala.collection._&#xA;    VLL.value.asInstanceOf[mutable.HashMap[String,Function1[Any,Any]]](&quot;stmtPenDown&quot;)(a)&#xA;}&#xA;">
          <Token Ref="PENDOWN1" />
          <Token Ref="PENDOWN2" />
          <Token Ref="PENDOWN3" />
          <Token Ref="PENDOWN4" />
        </Choice>
    </Parser>
    <Parser Name="stmtMake">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtMake&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="MAKE1" />
            <Token Ref="MAKE2" />
          </Choice>
          <Token Ref="SYMBOL" />
          <Reference Ref="expr" />
        </Sequence>
    </Parser>
    <Parser Name="stmtBack">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtBack&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="BACK1" />
            <Token Ref="BACK2" />
            <Token Ref="BACK3" />
            <Token Ref="BACK4" />
          </Choice>
          <Reference Ref="expr" />
        </Sequence>
    </Parser>
    <Parser Name="stmtTo">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtTo&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="TO1" />
            <Token Ref="TO2" />
          </Choice>
          <Token Ref="NAME" />
          <Token Ref="VARIABLE" Mult="*"/>
          <Reference Ref="statements" Mult="+"/>
          <Choice Drop="true">
            <Token Ref="END1" />
            <Token Ref="END2" />
          </Choice>
        </Sequence>
    </Parser>
    <Parser Name="stmtLeft">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtLeft&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="LEFT1" />
            <Token Ref="LEFT2" />
            <Token Ref="LEFT3" />
            <Token Ref="LEFT4" />
          </Choice>
          <Reference Ref="expr" />
        </Sequence>
    </Parser>
    <Parser Name="stmtPenUp">
        <Choice ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtPenUp&quot;)(a)&#xA;}&#xA;">
          <Token Ref="PENUP1" />
          <Token Ref="PENUP2" />
          <Token Ref="PENUP3" />
          <Token Ref="PENUP4" />
        </Choice>
    </Parser>
    <Parser Name="stmtDraw">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtDraw&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="DRAW1" />
            <Token Ref="DRAW2" />
          </Choice>
          <Reference Ref="expr" Mult="?"/>
        </Sequence>
    </Parser>
    <Parser Name="stmtPenColor">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtPenColor&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="PENCOLOR1" />
            <Token Ref="PENCOLOR2" />
            <Token Ref="PENCOLOR3" />
            <Token Ref="PENCOLOR4" />
          </Choice>
          <Reference Ref="expr" />
        </Sequence>
    </Parser>
    <Parser Name="stmtRepeat">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtRepeat&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="REPEAT1" />
            <Token Ref="REPEAT2" />
          </Choice>
          <Reference Ref="expr" />
          <Reference Ref="closure" />
        </Sequence>
    </Parser>
    <Parser Name="stmtForward">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtForward&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="FORWARD1" />
            <Token Ref="FORWARD2" />
            <Token Ref="FORWARD3" />
            <Token Ref="FORWARD4" />
          </Choice>
          <Reference Ref="expr" />
        </Sequence>
    </Parser>
    <Parser Name="stmtNoDraw">
        <Choice ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtNoDraw&quot;)(a)&#xA;}&#xA;">
          <Token Ref="NODRAW1" />
          <Token Ref="NODRAW2" />
        </Choice>
    </Parser>
    <Parser Name="closure">
        <Sequence >
          <Token Ref="LBKT" Drop="true"/>
          <Reference Ref="statements" Mult="*"/>
          <Token Ref="RBKT" Drop="true"/>
        </Sequence>
    </Parser>
    <Parser Name="Main">
        <Reference Ref="statements" Mult="+" ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; &#xA;    import scala.collection._&#xA;    val vll = mutable.HashMap[String,Function1[Any,Any]]()&#xA;    vll(&quot;stmtBack&quot;) = (a: Any) =&gt; {println(&quot;BACK&quot;)}&#xA;    vll(&quot;stmtDraw&quot;) = (a: Any) =&gt; {println(&quot;DRAW&quot;)}&#xA;    vll(&quot;stmtForward&quot;) = (a: Any) =&gt; {println(&quot;FORWARD&quot;)}&#xA;    vll(&quot;stmtLeft&quot;) = (a: Any) =&gt; {println(&quot;LEFT&quot;)}&#xA;    vll(&quot;stmtMake&quot;) = (a: Any) =&gt; {println(&quot;MAKE&quot;)}&#xA;    vll(&quot;stmtNoDraw&quot;) = (a: Any) =&gt; {println(&quot;NO DRAW&quot;)}&#xA;    vll(&quot;stmtPenColor&quot;) = (a: Any) =&gt; {println(&quot;PEN COLOR&quot;)}&#xA;    vll(&quot;stmtPenDown&quot;) = (a: Any) =&gt; {println(&quot;PEN DOWN&quot;)}&#xA;    vll(&quot;stmtPenUp&quot;) = (a: Any) =&gt; {println(&quot;PEN UP&quot;)}&#xA;    vll(&quot;stmtRepeat&quot;) = (a: Any) =&gt; {println(&quot;REPEAT&quot;)}&#xA;    vll(&quot;stmtRight&quot;) = (a: Any) =&gt; {println(&quot;RIGHT&quot;)}&#xA;    vll(&quot;stmtTo&quot;) = (a: Any) =&gt; {println(&quot;TO&quot;)}&#xA;    VLL.value = vll&#xA;  case p =&gt; &#xA;    printf(&quot;Done! ... %s%n&quot;, p)&#xA;}"/>
    </Parser>
    <Parser Name="stmtRight">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case x =&gt; VLL.asInstanceOf[Map[String,Function1[Any,Any]]](&quot;stmtRight&quot;)(a)&#xA;}&#xA;">
          <Choice Drop="true">
            <Token Ref="RIGHT1" />
            <Token Ref="RIGHT2" />
            <Token Ref="RIGHT3" />
            <Token Ref="RIGHT4" />
          </Choice>
          <Reference Ref="expr" />
        </Sequence>
    </Parser>
    <Parser Name="list">
        <Sequence >
          <Token Ref="LBKT" Drop="true"/>
          <Reference Ref="expr" Mult="*"/>
          <Token Ref="RBKT" Drop="true"/>
        </Sequence>
    </Parser>
  </Parsers>
</VLL-Grammar>
