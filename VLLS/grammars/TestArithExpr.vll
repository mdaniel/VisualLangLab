<VLL-Grammar>
  <Whitespace>\\s+</Whitespace>
  <Comments></Comments>
  <Tokens>
    <Literal Name="RPAREN" Pattern=")"/>
    <Regex Name="floatingPointNumber" Pattern="(\\d+(\\.\\d*)?|\\d*\\.\\d+)([eE][+-]?\\d+)?[fFdD]?"/>
    <Literal Name="MULT" Pattern="*"/>
    <Literal Name="LPAREN" Pattern="("/>
    <Literal Name="MINUS" Pattern="-"/>
    <Literal Name="DIV" Pattern="/"/>
    <Literal Name="PLUS" Pattern="+"/>
  </Tokens>
  <Parsers>
    <Parser Name="Expr">
        <Sequence ActionText="function (arg) {&#xA;  if (!arg) {&#xA;    return;&#xA;  }&#xA;  var expr = arg[0];&#xA;  var list = arg[1];&#xA;  for (var i = 0; i &lt; list.length; ++i) {&#xA;    var pair = list[i];&#xA;    switch (pair[0]) {&#xA;    case 0:&#xA;      expr += pair[1]; break;&#xA;    case 1:&#xA;      expr -= pair[1]; break;&#xA;    }&#xA;  }&#xA;  return expr;&#xA;}">
          <Reference Ref="term" />
          <Choice Mult="*">
            <Sequence >
              <Token Ref="PLUS" Drop="true"/>
              <Reference Ref="term" />
            </Sequence>
            <Sequence >
              <Token Ref="MINUS" Drop="true"/>
              <Reference Ref="term" />
            </Sequence>
          </Choice>
        </Sequence>
    </Parser>
    <Parser Name="factor">
        <Choice ActionText="function (arg) {&#xA;  if (!arg) {&#xA;    return;&#xA;  }&#xA;  switch (arg[0]) {&#xA;  case 0:&#xA;    return parseFloat(arg[1]); break;&#xA;  case 1: &#xA;    return arg[1]; break;&#xA;  } &#xA;}">
          <Token Ref="floatingPointNumber" />
          <Sequence >
            <Token Ref="LPAREN" Drop="true"/>
            <Reference Ref="Expr" />
            <Token Ref="RPAREN" Drop="true"/>
          </Sequence>
        </Choice>
    </Parser>
    <Parser Name="term">
        <Sequence ActionText="(a: Any) =&gt; a match {&#xA;  case null =&gt; null&#xA;  case Array(f: Double, lst:List[_]) =&gt; &#xA;    var res = f&#xA;    lst.foreach(_ match {&#xA;      case Pair(0, f2:Double) =&gt; res *= f2&#xA;      case Pair(1, f2:Double) =&gt; res /= f2&#xA;    })&#xA;    res&#xA;}">
          <Reference Ref="factor" />
          <Choice Mult="*">
            <Sequence >
              <Token Ref="MULT" Drop="true"/>
              <Reference Ref="factor" />
            </Sequence>
            <Sequence >
              <Token Ref="DIV" Drop="true"/>
              <Reference Ref="factor" />
            </Sequence>
          </Choice>
        </Sequence>
    </Parser>
    <Parser Name="ExprTester">
        <Reference Ref="Expr" ActionText="function (a) {&#xA;  if (a) {&#xA;    // AFTER code - test result&#xA;    if (a == 24) {&#xA;      return &quot;OK&quot;;&#xA;    } else {&#xA;      return &quot;ERROR: &quot; + a;&#xA;    }&#xA;  } else {&#xA;    // BEFORE code - setup prerequisites&#xA;    ParserTestInput.setText(&quot;12 / 3 + 4 * 5&quot;);&#xA;  }&#xA;}"/>
    </Parser>
  </Parsers>
</VLL-Grammar>
