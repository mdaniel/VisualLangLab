<?xml version="1.0"?>

<!-- *****************  Do not edit  ***************** -->
<!-- Generated by VisualLangLab (http://vll.java.net/) -->
<!-- *****************  Do not edit  ***************** -->
<VLL-Grammar>
  <Whitespace>[ \\t]+</Whitespace>
  <Comments></Comments>
  <Tokens>
    <Literal Name="EQUALS" Pattern="=" />
    <Regex Name="ID" Pattern="[a-zA-Z]+" />
    <Regex Name="INT" Pattern="\\d+" />
    <Literal Name="LPAREN" Pattern="(" />
    <Literal Name="MINUS" Pattern="-" />
    <Literal Name="MULT" Pattern="*" />
    <Regex Name="NEWLINE" Pattern="\\r?\\n" />
    <Literal Name="PLUS" Pattern="+" />
    <Literal Name="RPAREN" Pattern=")" />
  </Tokens>
  <Parsers>
    <Parser Name="Prog" >
      <Reference Ref="stat" Mult="+" ActionText="function (arg) {&#xA;  if (!arg) {&#xA;    memory = {};&#xA;  } else {&#xA;    return &quot;Ok&quot;;&#xA;  }&#xA;}" />
    </Parser>
    <Parser Name="atom" >
      <Choice ActionText="function (arg) {&#xA;  if (arg) {&#xA;    switch (arg[0].intValue()) {&#xA;      case 0: &#xA;        return parseInt(arg[1]); &#xA;      case 1:&#xA;        if (memory.hasOwnProperty(arg[1])) {&#xA;          return memory[arg[1]]; &#xA;        } else {&#xA;          println(&quot;undefined variable &quot; +&#xA;              arg[1]);&#xA;          return 0;&#xA;        }&#xA;      case 2: &#xA;        return arg[1][1].doubleValue(); &#xA;    }&#xA;  }&#xA;}" >
        <Token Ref="INT" />
        <Token Ref="ID" />
        <Sequence >
          <Token Ref="LPAREN" />
          <Reference Ref="expr" />
          <Token Ref="RPAREN" />
        </Sequence>
      </Choice>
    </Parser>
    <Parser Name="expr" >
      <Sequence ActionText="f (arg) {&#xA;  if (arg) {&#xA;    var multExpr = arg[0].doubleValue();&#xA;    var list = arg[1];&#xA;    for (var i = 0; i &lt; list.size(); ++i) {&#xA;      var arr = list.get(i);&#xA;      var choice = arr[0][0].intValue();&#xA;      switch (choice) {&#xA;        case 0: multExpr += arr[1].doubleValue(); break;&#xA;        case 1: multExpr -= arr[1].doubleValue(); break;&#xA;      }&#xA;    }&#xA;    return multExpr;&#xA;  }&#xA;}&#xA;" >
        <Reference Ref="multExpr" />
        <Sequence Mult="*" >
          <Choice >
            <Token Ref="PLUS" />
            <Token Ref="MINUS" />
          </Choice>
          <Reference Ref="multExpr" />
        </Sequence>
      </Sequence>
    </Parser>
    <Parser Name="multExpr" >
      <Sequence ActionText="f (arg) {&#xA;  if (arg) {&#xA;    var atom = arg[0].doubleValue();&#xA;    var list = arg[1];&#xA;    for (var i = 0; i &lt; list.size(); ++i) {&#xA;      var arr = list.get(i);&#xA;      atom *= arr[1].doubleValue();&#xA;    }&#xA;    return atom;&#xA;  }&#xA;}&#xA;" >
        <Reference Ref="atom" />
        <Sequence Mult="*" >
          <Token Ref="MULT" />
          <Reference Ref="atom" />
        </Sequence>
      </Sequence>
    </Parser>
    <Parser Name="stat" >
      <Choice ActionText="function (arg) {&#xA;  if (arg) {&#xA;    switch (arg[0].intValue()) {&#xA;      case 0: &#xA;        memory[arg[1][0]] = arg[1][2].doubleValue(); &#xA;        break;&#xA;      case 1:&#xA;        println(arg[1][0]); break;&#xA;      case 2: break;&#xA;    }&#xA;    return arg; &#xA;  }&#xA;}" >
        <Sequence >
          <Token Ref="ID" />
          <Token Ref="EQUALS" />
          <Reference Ref="expr" />
          <Token Ref="NEWLINE" />
        </Sequence>
        <Sequence >
          <Reference Ref="expr" />
          <Token Ref="NEWLINE" />
        </Sequence>
        <Token Ref="NEWLINE" />
      </Choice>
    </Parser>
  </Parsers>
</VLL-Grammar>
