<?xml version="1.0"?>

<!-- *****************  Do not edit  ***************** -->
<!-- Generated by VisualLangLab (http://vll.java.net/) -->
<!-- *****************  Do not edit  ***************** -->
<VLL-Grammar>
  <Whitespace>\\s+</Whitespace>
  <Comments></Comments>
  <Tokens>
    <Literal Name="DIV" Pattern="/" />
    <Literal Name="LPAREN" Pattern="(" />
    <Literal Name="MINUS" Pattern="-" />
    <Literal Name="MULT" Pattern="*" />
    <Literal Name="PLUS" Pattern="+" />
    <Literal Name="RPAREN" Pattern=")" />
    <Regex Name="floatingPointNumber" Pattern="(\\d+(\\.\\d*)?|\\d*\\.\\d+)([eE][+-]?\\d+)?[fFdD]?" />
  </Tokens>
  <Parsers>
    <Parser Name="Expr" >
      <Sequence ActionText="function (arg) {&#xA;  if (!arg) {&#xA;    return;&#xA;  }&#xA;  var term = arg[0].doubleValue();&#xA;  var list = arg[1];&#xA;  for (var i = 0; i &lt; list.size(); ++i) {&#xA;    var pair = list.get(i);&#xA;    switch (pair[0].intValue()) {&#xA;      case 0: term += pair[1].doubleValue(); break;&#xA;      case 1: term -= pair[1].doubleValue(); break;&#xA;    } &#xA;  }&#xA;  return term;&#xA;}" >
        <Reference Ref="term" />
        <Choice Mult="*" >
          <Sequence >
            <Token Ref="PLUS" Drop="true" />
            <Reference Ref="term" />
          </Sequence>
          <Sequence >
            <Token Ref="MINUS" Drop="true" />
            <Reference Ref="term" />
          </Sequence>
        </Choice>
      </Sequence>
    </Parser>
    <Parser Name="factor" >
      <Choice ActionText="function (arg) {&#xA;  if (!arg) {&#xA;    return;&#xA;  }&#xA;  switch (arg[0].intValue()) {&#xA;    case 0: return parseFloat(arg[1]); &#xA;    case 1: return arg[1].doubleValue(); &#xA;  } &#xA;}" >
        <Token Ref="floatingPointNumber" />
        <Sequence >
          <Token Ref="LPAREN" Drop="true" />
          <Reference Ref="Expr" />
          <Token Ref="RPAREN" Drop="true" />
        </Sequence>
      </Choice>
    </Parser>
    <Parser Name="term" >
      <Sequence ActionText="function (arg) {&#xA;  if (!arg) {&#xA;    return;&#xA;  }&#xA;  var factor = arg[0].doubleValue();&#xA;  var list = arg[1];&#xA;  for (var i = 0; i &lt; list.size(); ++i) {&#xA;    var pair = list.get(i);&#xA;    switch (pair[0].intValue()) {&#xA;      case 0: factor *= pair[1].doubleValue(); break;&#xA;      case 1: factor /= pair[1].doubleValue(); break;&#xA;    } &#xA;  }&#xA;  return factor;&#xA;}" >
        <Reference Ref="factor" />
        <Choice Mult="*" >
          <Sequence >
            <Token Ref="MULT" Drop="true" />
            <Reference Ref="factor" />
          </Sequence>
          <Sequence >
            <Token Ref="DIV" Drop="true" />
            <Reference Ref="factor" />
          </Sequence>
        </Choice>
      </Sequence>
    </Parser>
  </Parsers>
</VLL-Grammar>
